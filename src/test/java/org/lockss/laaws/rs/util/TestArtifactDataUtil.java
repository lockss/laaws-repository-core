/*
 * Copyright (c) 2017, Board of Trustees of Leland Stanford Jr. University,
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.lockss.laaws.rs.util;

import org.apache.commons.io.IOUtils;
import org.apache.commons.io.output.NullOutputStream;
import org.apache.http.HttpResponse;
import org.apache.http.ProtocolVersion;
import org.apache.http.message.BasicStatusLine;
import org.junit.jupiter.api.*;
import org.lockss.laaws.rs.model.ArtifactData;
import org.lockss.log.L4JLogger;
import org.lockss.util.test.LockssTestCase5;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

/**
 * Tests for {@link ArtifactDataUtil}.
 */
public class TestArtifactDataUtil extends LockssTestCase5 {
    private final static L4JLogger log = L4JLogger.getLogger();

    @BeforeEach
    public void setUp() throws Exception {
    }

    /**
     *  Tests that {@link ArtifactDataUtil#getHttpResponseStreamFromHttpResponse(HttpResponse)} generates an HTTP
     *  response stream that is the same length as the length of the headers generated by
     *  {@link ArtifactDataUtil#getHttpResponseHeader(ArtifactData)} and the declared length of the artifact data.
     */
    @Test
    public void testHttpResponseSerializationPaths() throws Exception {
        byte[] HELLO_WORLD = "hello world".getBytes(StandardCharsets.UTF_8);

        ArtifactData artifactData = new ArtifactData();
        artifactData.setInputStream(new ByteArrayInputStream(HELLO_WORLD));
        artifactData.setContentLength(HELLO_WORLD.length);
        artifactData.setHttpStatus(
            new BasicStatusLine(
                new ProtocolVersion("HTTP", 1, 1), 200, "OK"));

        // Compute length by generating headers explicitly
        byte[] headers = ArtifactDataUtil.getHttpResponseHeader(artifactData);
        long length1 = headers.length + artifactData.getContentLength();

        // Compute length by generating entire HTTP response stream
        InputStream httpResponse =
            ArtifactDataUtil.getHttpResponseStreamFromHttpResponse(
                ArtifactDataUtil.getHttpResponseFromArtifactData(artifactData));

        long length2 = IOUtils.copyLarge(httpResponse, NullOutputStream.NULL_OUTPUT_STREAM);

        // Assert both paths result in the same HTTP response stream length
        assertEquals(length1, length2);
    }

    @Test
    public void getHttpResponseStreamFromArtifact() {
    }

    @Test
    public void getHttpResponseFromArtifact() {
    }

    @Test
    public void getHttpResponseStreamFromHttpResponse() {
    }

    @Test
    public void writeHttpResponseStream() {
    }

    @Test
    public void writeHttpResponseHeader() {
    }

    @Test
    public void writeHttpResponse() {
    }
}